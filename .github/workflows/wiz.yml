name: 'wiz-cli'
on: 
  pull_request:
  push:
    branches:
      - main

jobs:
  wiz-cli-iac-scan:
    name: 'Wiz-cli IaC Scan'
    runs-on: ubuntu-latest
    env:
      SCAN_PATH: "./aws" # Set the relative path in the repo to scan
      POLICY: "iac-fail-low" # Set the desired Wiz-cli policy to use

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Download Wiz-cli & utils
      run: curl -o wizcli https://wizcli.app.wiz.io/latest/wizcli && chmod +x wizcli

    - name: Authenticate to Wiz
      run: ./wizcli auth --id "$WIZ_CLIENT_ID" --secret "$WIZ_CLIENT_SECRET"
      env:
        WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
        WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}
    
    # - name: Add Problem Matcher
    #   run: echo "::add-matcher::.github/wizcli-problem-matcher.json"

    - name: Run wiz-cli IaC scan
      # run: RESULTS=$(./wizcli iac scan --path ./aws --policy "scotty-iac-monitor-only" --name scotty-gh-iac-scan --detailed > wizcli-results.json)
      run: ./wizcli iac scan --path ./aws --policy "scotty-iac-monitor-only" --tag image-name=${{ vars.IMAGE_NAME }} --tag repo=$GITHUB_REPOSITORY --tag repo-owner=$GITHUB_REPOSITORY_OWNER --name scotty-gh-iac-scan --format sarif > results.sarif

    # - name: Convert to sarif
    #   run: python3 convert-to-sarif.py > results.sarif

    # - uses: actions/upload-artifact@v3
    #   with:
    #     name: Output SARIF REPORT
    #     path: results.sarif

    - uses: github/codeql-action/upload-sarif@v2
      with:
        # Path to SARIF file relative to the root of the repository
        sarif_file: results.sarif

    - name: Outputs
      if: always()
      run: echo "::set-output name=results::$RESULTS"

#   create-issues:
#     needs: wiz-cli-iac-scan
#     runs-on: ubuntu-latest

#     steps:
#     - name: get-code-scanning-issues
#       uses: octokit/request-action@v2.x
#       id: get_code_scanning_issues
#       with:
#         route: GET /repos/${{ github.repository }}/code-scanning/alerts?state=open
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#     # - run: "echo '${{ steps.get_code_scanning_issues.outputs.data }}' | jq '.[].number'"
#     - run: |
#         echo "${{ steps.get_code_scanning_issues.outputs.data }}" | jq -c '.[]' | while IFS= read -r alert; do
#           title=$(echo "${alert}" | jq -r '.rule.id')
#           severity=$(echo "${alert}" | jq -r '.rule.severity')
#           name=$(echo "${alert}" | jq -r '.rule.name')
#           printf "'%s' '%s' '%s'\n" "$title" "$severity" "$name"
#         done
        

      # - name: Get Code Scanning Alerts
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   id: get-alerts
      #   uses: octokit/request-action@v2.x
      #   with:
      #     route: GET /repos/${{ github.repository }}/code-scanning/alerts?state=open
      #     # mediaType: application/vnd.github.scarlet-witch-preview+json
      # - run: "echo '${{ steps.get-alerts.outputs.outputs.data }}' | jq '.'"
      
    # - name: Generate Issues for Alerts
    #   # if: ${{ steps.get_code_scanning_issues.outputs.data.total_count > 0 }}
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     for alert in ${{ steps.get_code_scanning_issues.data.alerts }}; do
    #       title="$(echo "$alert" | jq -r '.rule_id')"
    #       body="$(echo "$alert" | jq -r '.description')"
    #       labels="$(echo "$alert" | jq -r '.tool.name')"
    #       github_token="${{ secrets.GITHUB_TOKEN }}"
    #       repo="${{ github.repository }}"
    #       curl -XPOST -H "Authorization: Bearer $github_token" \
    #         -H "Accept: application/vnd.github.symmetra-preview+json" \
    #         -H "Content-Type: application/json" \
    #         "https://api.github.com/repos/$repo/issues" \
    #         -d "{\"title\":\"$title\",\"body\":\"$body\",\"labels\":[\"$labels\"]}"
    #     done
